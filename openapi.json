{
  "$ref": "https://ref.actionschema.com/openapi.json",
  "openapi": "3.1.0",
  "info": {
    "title": "ZIPObject API",
    "version": "1.1.0",
    "description": "API for fetching contents from ZIP files with various filtering options"
  },
  "servers": [
    {
      "url": "https://zipobject.com/",
      "description": "Monetized user-server that allows signup."
    },
    {
      "url": "https://zipobject.vercel.app/",
      "description": "Admin server protected with admin-secret"
    }
  ],
  "security": [{}, { "bearerAuth": [] }],
  "paths": {
    "/tree/{zipUrl}": {
      "get": {
        "_COMMENT": "Source: zipobject.tree (proxied there)",
        "summary": "Get zip file contents as tree structure",
        "description": "Fetch and process a zip file's contents, returning a hierarchical tree structure or a flat list of files with sizes. The service can calculate token estimates for text files.",
        "parameters": [
          {
            "name": "zipUrl",
            "in": "path",
            "description": "URL-encoded path to a zip file",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "https://example.com/archive.zip"
          },
          {
            "name": "type",
            "in": "query",
            "description": "Output type format (token-tree, token-list, or file size by default)",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["token-tree", "token-list"]
            }
          },
          {
            "name": "basePath",
            "in": "query",
            "description": "Base path filter within the zip file to process only specific directories",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "accept",
            "in": "query",
            "description": "Response format (application/json or text/yaml)",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["application/json", "text/yaml"],
              "default": "application/json"
            }
          },
          {
            "name": "max-age",
            "in": "query",
            "description": "Cache control max-age in seconds (default: 86400 - 24 hours)",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 86400
            }
          },
          {
            "name": "secret",
            "in": "query",
            "description": "Secret token for authentication (required, can also be provided via Authorization header)",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Authorization",
            "in": "header",
            "description": "Bearer token for authentication (alternative to secret query parameter)",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "Bearer your_secret_here"
          },
          {
            "name": "accept",
            "in": "header",
            "description": "Accept header for response format (application/json or text/yaml)",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["application/json", "text/yaml"],
              "default": "application/json"
            }
          },
          {
            "name": "Cache-Control",
            "in": "header",
            "description": "Cache-Control header to override default caching behavior",
            "required": false,
            "schema": {
              "type": "string"
            },
            "example": "max-age=3600"
          },
          {
            "name": "x-zip-api-key",
            "in": "header",
            "description": "API key for zip service (alternative to apiKey query parameter)",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully processed zip file",
            "content": {
              "application/json": {
                "schema": {
                  "oneOf": [
                    {
                      "type": "object",
                      "description": "Flat file list with sizes",
                      "additionalProperties": {
                        "type": "integer",
                        "description": "File size or token estimate"
                      },
                      "example": {
                        "/file1.txt": 1000,
                        "/dir/file2.txt": 2000
                      }
                    },
                    {
                      "type": "object",
                      "description": "Hierarchical tree with sizes",
                      "properties": {
                        "__size": {
                          "type": "integer",
                          "description": "Total size of all files in this directory"
                        }
                      },
                      "additionalProperties": {
                        "oneOf": [{ "type": "integer" }, { "type": "object" }]
                      },
                      "example": {
                        "__size": 3000,
                        "file1.txt": 1000,
                        "dir": {
                          "__size": 2000,
                          "file2.txt": 2000
                        }
                      }
                    }
                  ]
                }
              },
              "text/yaml": {
                "schema": {
                  "type": "string",
                  "description": "YAML representation of the tree or list"
                }
              }
            }
          },
          "401": {
            "description": "Authentication failed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Secret invalid"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Zip file not found or invalid path",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Zip not found https://example.com/archive.zip"
                    },
                    "status": {
                      "type": "integer",
                      "example": 404
                    }
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string",
                      "example": "Internal server error"
                    },
                    "details": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "secretAuth": []
          }
        ]
      }
    },
    "/{url}": {
      "get": {
        "operationId": "getZipContents",
        "summary": "Get ZIP contents",
        "description": "Fetch contents of a ZIP file, with various filtering options.",
        "parameters": [
          {
            "name": "url",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "URL of the ZIP file to process, URL of a website where the zip can be found, or URL where a JSON object or file object can be found."
          },
          {
            "name": "x-zip-api-key",
            "in": "header",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "API key to pass as bearer authorization token to the url where the zip/tar is located."
          },
          {
            "name": "zipType",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["zipball", "tarball"]
            },
            "description": "What type of zip is it? Defaults to zipball"
          },
          {
            "name": "objectType",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["file-object", "json"]
            },
            "description": "File objects are processed by looking at the file items and downloading binary, while json objects are processed by collpasing subsets into files when a property with known extension is encountered."
          },
          {
            "name": "immutable",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            },
            "description": "Indicates if the ZIP file is immutable"
          },
          {
            "name": "omitFirstSegment",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            },
            "description": "For GitHub, npmjs, and JSR, this is needed. For other zips this may not be the case."
          },
          {
            "name": "rawUrlPrefix",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Prefix to use for a raw URL"
          },
          {
            "name": "plugins",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string",
              "enum": ["imports", "parse", "data"]
            },
            "description": "Comma-separated list of plugins to use"
          },

          {
            "name": "allowedPaths",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Comma-separated list of base paths allowed"
          },
          {
            "name": "pathPatterns",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Glob pattern for files to include. If provided, will filter path on this."
          },
          {
            "name": "excludePathPatterns",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Glob pattern for files to exclude"
          },
          {
            "name": "enableFuzzyMatching",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            },
            "description": "Boolean to enable fuzzy matching for pathPatterns (like VS Code's Cmd+P)"
          },
          {
            "name": "disableGenignore",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            },
            "description": "`.genignore` works like `.gitignore` and the repo owner can place this file in the repo to automatically filter out these files. To disable this and also to disable the default genignore, you can set this to true."
          },
          {
            "name": "maxFileSize",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "description": "Maximum file size to include (in bytes)"
          },
          {
            "name": "search",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "A text/pattern to search for in the file content"
          },
          {
            "name": "regex",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Provide this instead of 'search' to search using a regex. must be base64 encoded and urlEncoded (e.g. \"encodeURIComponent(btoa(your_regex))\")"
          },
          {
            "name": "searchCaseSensitive",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            },
            "description": "Boolean to enable/disable case sensitivity"
          },
          {
            "name": "searchMatchWholeWord",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            },
            "description": "Boolean to match complete words only"
          },
          {
            "name": "maxTokens",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer"
            },
            "description": "Maximum number of tokens allowed in the response. Parse will stop including files after this number of tokens."
          },
          {
            "name": "yamlString",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "An URL Encoded string of a yaml of a subset of the file hierarchy of files you want to include. Deprecated - use pathPatterns instead."
          },
          {
            "name": "omitFiles",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            },
            "description": "If set to 'true' the response will not include the files"
          },
          {
            "name": "omitTree",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            },
            "description": "If set to 'true' the response will not include the tree"
          },
          {
            "name": "disableCache",
            "in": "query",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": false
            },
            "description": "If set to 'true' the response will not be cached"
          },
          {
            "name": "matchFilenames",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Comma-separated list of filenames to match (case-insensitive). Deprecated - use pathPatterns instead."
          },
          {
            "name": "ext",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Comma-separated list of file extensions to include. Deprecated - use pathPatterns instead."
          },
          {
            "name": "dir",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Comma-separated list of directories to include. Deprecated - use pathPatterns instead."
          },
          {
            "name": "exclude-ext",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Comma-separated list of file extensions to exclude. Deprecated - use pathPatterns instead."
          },
          {
            "name": "exclude-dir",
            "in": "query",
            "required": false,
            "schema": {
              "type": "string"
            },
            "description": "Comma-separated list of directories to exclude. Deprecated - use pathPatterns instead."
          }
        ],
        "responses": {
          "200": {
            "description": "A directory tree and all (filtered) files from the ZIP",
            "content": {
              "application/zip": {
                "schema": { "type": "string", "format": "binary" }
              },
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": ["size", "tree", "files"],
                  "properties": {
                    "size": {
                      "type": "object",
                      "properties": {
                        "totalFiles": {
                          "type": "number",
                          "description": "Total filecount including omitted files"
                        },
                        "files": {
                          "type": "number",
                          "description": "Total filecount excluding omitted files"
                        },
                        "totalTokens": {
                          "type": "number",
                          "description": "Approximated tokens of all string files combined. May slightly vary depending on which AI model you use."
                        },
                        "tokens": {
                          "type": "number",
                          "description": "Same as total tokens except it could be filtered when maxTokens is applied."
                        },
                        "characters": { "type": "number" },
                        "lines": { "type": "number" }
                      }
                    },
                    "tree": {
                      "description": "Recursive object that describes the file hierarchy. Null is a leaf file. Folders always contain another tree.",
                      "type": "object",
                      "additionalProperties": {
                        "anyOf": [
                          { "type": "null" },
                          {
                            "type": "object",
                            "additionalProperties": {
                              "anyOf": [
                                { "type": "null" },
                                { "$ref": "#/components/schemas/Tree" }
                              ]
                            }
                          }
                        ]
                      }
                    },
                    "files": {
                      "type": "object",
                      "description": "The file object. Keys are filepaths starting with '/'.",
                      "additionalProperties": {
                        "type": "object",
                        "required": ["type", "size", "hash"],
                        "properties": {
                          "type": {
                            "type": "string",
                            "enum": ["content", "binary"]
                          },
                          "size": {
                            "type": "number",
                            "description": "Size in bytes."
                          },
                          "hash": {
                            "type": "string",
                            "description": "Hash of the content that makes it easy to check for equality."
                          },
                          "content": {
                            "type": "string",
                            "description": "Can be either utf-8 content, or binary encoded as base-64 string."
                          },
                          "url": {
                            "type": "string",
                            "description": "GET URL resolving to the content"
                          },
                          "updatedAt": {
                            "type": "number",
                            "description": "Timestamp of when the file was last updated"
                          },
                          "json": {
                            "type": "object",
                            "description": "If content is in JSON, YAML, CSV, XML or other structured data format, the parsed data may be put here as JSON object"
                          },
                          "imports": {
                            "type": "object",
                            "description": "Map of imported paths to list of imported names",
                            "additionalProperties": {
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          },
                          "exportDefault": {
                            "type": "array",
                            "description": "List of default exports",
                            "items": {
                              "type": "string"
                            }
                          },
                          "mainComment": {
                            "type": "string",
                            "description": "Main comment from the file"
                          },
                          "parse": {
                            "type": "object",
                            "description": "SWC parse result for the file"
                          },
                          "data": {
                            "type": "object",
                            "description": "SWC parse for code-files, parsed to statements and imports",
                            "properties": {
                              "imports": {
                                "type": "array",
                                "items": {
                                  "type": "object"
                                }
                              },
                              "statements": {
                                "type": "array",
                                "items": {
                                  "type": "object"
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "ZIP file or requested contents not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "status": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized access to ZIP file",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "error": {
                      "type": "string"
                    },
                    "status": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Tree": {
        "description": "Recursive object that describes the file hierarchy. Null is a leaf file. Folders always contain another tree.",
        "type": "object",
        "additionalProperties": {
          "anyOf": [{ "type": "null" }, { "$ref": "#/components/schemas/Tree" }]
        }
      },

      "FileEntry": {
        "type": "object",
        "required": ["type", "size", "hash", "updatedAt"],
        "properties": {
          "type": {
            "type": "string",
            "enum": ["binary", "content"],
            "description": "Type of file content"
          },
          "content": {
            "type": "string",
            "description": "UTF-8 content of the file"
          },
          "binary": {
            "type": "string",
            "format": "byte",
            "description": "Binary content as ArrayBuffer"
          },
          "url": {
            "type": "string",
            "description": "URL to the file content"
          },
          "size": {
            "type": "integer",
            "description": "Size of the file in bytes"
          },
          "hash": {
            "type": "string",
            "description": "Hash of the content that makes it easy to check for equality"
          },
          "updatedAt": {
            "type": "integer",
            "description": "Timestamp of when the file was last updated"
          },
          "json": {
            "type": "object",
            "description": "Data file content parsed as json (json, toml, yaml files)"
          },
          "imports": {
            "type": "object",
            "description": "Imported names",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "exportDefault": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Default exports"
          },
          "mainComment": {
            "type": "string",
            "description": "Main comment from the file"
          },
          "parse": {
            "type": "object",
            "description": "SWC parse result"
          },
          "data": {
            "type": "object",
            "description": "SWC parse for code-files, parsed to statements and imports",
            "properties": {
              "imports": {
                "type": "array",
                "items": {
                  "type": "object"
                }
              },
              "statements": {
                "type": "array",
                "items": {
                  "type": "object"
                }
              }
            }
          },
          "matches": {
            "description": "Array of regex matches if you provided a 'search' filter.",
            "type": "array",
            "items": { "type": "array", "items": { "type": "string" } }
          }
        }
      },
      "StreamHandlerOptions": {
        "type": "object",
        "properties": {
          "shouldOmitFiles": {
            "type": "boolean",
            "description": "Whether to omit files from the response"
          },
          "shouldOmitTree": {
            "type": "boolean",
            "description": "Whether to omit tree from the response"
          },
          "disableGenignore": {
            "type": "boolean",
            "description": "Whether to disable genignore filtering"
          },
          "plugins": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of plugins to use"
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "description": "Authentication token for the user of zipobject. For zipobject.vercel.app this is an admin-secret, but for zipobject.com this is an API gathered from the dashboard or over the /login API."
      }
    }
  }
}
